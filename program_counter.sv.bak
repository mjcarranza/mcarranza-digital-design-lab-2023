/*
module program_counter(input logic clk, input logic rst, input logic [31:0] PC, output logic [31:0] PC_out);
    logic [31:0] PC_out_temp;
    
    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            PC_out_temp <= 32'b0;
        end else begin
            PC_out_temp <= PC + 32'b1;
        end
    end
    
    assign PC_out = PC_out_temp;
    
endmodule
*/
/*
module program_counter(input clk, rst, input logic [31:0] PC, output logic [31:0] PC_out);

logic [31:0] state, next_state;

//actual state logic
always_ff @ (posedge clk or posedge rst)
	if (rst) state = 32'd0;
	else
		state = next_state;

//next state logic
always_comb begin
	next_state = state + 32'd1; 
end 
//output logic
assign PC_out = state;	

endmodule
*/

/*
module program_counter
(input logic clk, reset,
input logic [32-1:0] d,
output logic [32-1:0] q);

always_ff @(negedge clk or negedge reset)
if (reset) q <= 0;
else q <= d;

endmodule
*/

module program_counter(
	input clk,
	input rst,
	input load,
	input [31:0] pc_in,
	output [31:0] pc_out
	);
	
	logic [31:0] pc;
	logic [31:0] pc_temp;
	
	always_ff @(posedge clk) begin
	
		pc_temp <= pc;
			
	end
	
	always_ff @(posedge clk, negedge rst) begin
	
		if (rst == 0)
			pc <= 0;
		else if (load == 1)	
			pc <= pc_in;
		else
			pc <= pc;
	
	end

	assign pc_out = pc;
	
endmodule 